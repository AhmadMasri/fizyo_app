{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Types.ObjectId": {
				"type": "string"
			},
			"ISessions": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"sessionType": {
						"type": "string",
						"enum": [
							"group",
							"individual"
						]
					},
					"serviceProvidersID": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					},
					"clientsIDs": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Types.ObjectId"
								},
								"type": "array"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"duration": {
						"type": "number",
						"format": "double"
					},
					"serviceType": {
						"type": "string",
						"enum": [
							"Online",
							"Home",
							"Office"
						]
					},
					"location": {
						"type": "string"
					},
					"attachments": {
						"properties": {
							"attachmentType": {
								"type": "string"
							},
							"attachmentName": {
								"type": "string"
							},
							"attachmentUrl": {
								"type": "string"
							}
						},
						"required": [
							"attachmentType",
							"attachmentName",
							"attachmentUrl"
						],
						"type": "object"
					},
					"requirements": {
						"type": "string"
					},
					"ratings": {
						"items": {
							"properties": {
								"ratingDate": {
									"type": "string",
									"format": "date-time"
								},
								"ratingValue": {
									"type": "string"
								},
								"raterUID": {
									"type": "string"
								}
							},
							"required": [
								"ratingDate",
								"ratingValue",
								"raterUID"
							],
							"type": "object"
						},
						"type": "array"
					},
					"reviews": {
						"items": {
							"properties": {
								"reviewDate": {
									"type": "string",
									"format": "date-time"
								},
								"reviewDetails": {
									"type": "string"
								},
								"reviewerUID": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/Types.ObjectId"
										}
									]
								}
							},
							"required": [
								"reviewDate",
								"reviewDetails",
								"reviewerUID"
							],
							"type": "object"
						},
						"type": "array"
					},
					"sessionFee": {
						"type": "number",
						"format": "double"
					},
					"payments": {
						"properties": {
							"amount": {
								"type": "number",
								"format": "double"
							},
							"payerID": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"$ref": "#/components/schemas/Types.ObjectId"
									}
								]
							},
							"paymentMethod": {
								"type": "string"
							},
							"discount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"amount",
							"payerID",
							"paymentMethod",
							"discount"
						],
						"type": "object"
					},
					"status": {
						"type": "string",
						"enum": [
							"initiated",
							"agreed",
							"canceled",
							"finished"
						]
					},
					"doctorReferral": {
						"type": "string"
					}
				},
				"required": [
					"sessionType",
					"name",
					"details",
					"startDate",
					"duration",
					"serviceType",
					"location",
					"requirements",
					"reviews",
					"sessionFee",
					"payments",
					"status",
					"doctorReferral"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FlattenMaps_T_": {
				"properties": {},
				"type": "object"
			},
			"Document_any.any.any_": {
				"$ref": "#/components/schemas/FlattenMaps_T_",
				"description": "Generic types for Document:\n*  T - the type of _id\n*  TQueryHelpers - Object with any helpers that should be mixed into the Query type\n*  DocType - the type of the actual Document created"
			},
			"Required_any_": {
				"properties": {},
				"type": "object",
				"description": "Make all properties in T required"
			},
			"Partial_ISessions_": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"sessionType": {
						"type": "string",
						"enum": [
							"group",
							"individual"
						]
					},
					"serviceProvidersID": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					},
					"clientsIDs": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Types.ObjectId"
								},
								"type": "array"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"duration": {
						"type": "number",
						"format": "double"
					},
					"serviceType": {
						"type": "string",
						"enum": [
							"Online",
							"Home",
							"Office"
						]
					},
					"location": {
						"type": "string"
					},
					"attachments": {
						"properties": {
							"attachmentType": {
								"type": "string"
							},
							"attachmentName": {
								"type": "string"
							},
							"attachmentUrl": {
								"type": "string"
							}
						},
						"required": [
							"attachmentType",
							"attachmentName",
							"attachmentUrl"
						],
						"type": "object"
					},
					"requirements": {
						"type": "string"
					},
					"ratings": {
						"items": {
							"properties": {
								"ratingDate": {
									"type": "string",
									"format": "date-time"
								},
								"ratingValue": {
									"type": "string"
								},
								"raterUID": {
									"type": "string"
								}
							},
							"required": [
								"ratingDate",
								"ratingValue",
								"raterUID"
							],
							"type": "object"
						},
						"type": "array"
					},
					"reviews": {
						"items": {
							"properties": {
								"reviewDate": {
									"type": "string",
									"format": "date-time"
								},
								"reviewDetails": {
									"type": "string"
								},
								"reviewerUID": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/Types.ObjectId"
										}
									]
								}
							},
							"required": [
								"reviewDate",
								"reviewDetails",
								"reviewerUID"
							],
							"type": "object"
						},
						"type": "array"
					},
					"sessionFee": {
						"type": "number",
						"format": "double"
					},
					"payments": {
						"properties": {
							"amount": {
								"type": "number",
								"format": "double"
							},
							"payerID": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"$ref": "#/components/schemas/Types.ObjectId"
									}
								]
							},
							"paymentMethod": {
								"type": "string"
							},
							"discount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"amount",
							"payerID",
							"paymentMethod",
							"discount"
						],
						"type": "object"
					},
					"status": {
						"type": "string",
						"enum": [
							"initiated",
							"agreed",
							"canceled",
							"finished"
						]
					},
					"doctorReferral": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"IAnnouncements": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"Session",
							"Advertisment"
						]
					},
					"referenceID": {
						"type": "string",
						"nullable": true
					},
					"statues": {
						"type": "string",
						"enum": [
							"draft",
							"published"
						]
					},
					"topic": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"sentDate": {
						"type": "string",
						"format": "date-time"
					},
					"attachments": {
						"type": "string"
					},
					"receiversUIDs": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Types.ObjectId"
								},
								"type": "array"
							}
						]
					}
				},
				"required": [
					"referenceID",
					"statues",
					"topic",
					"details",
					"sentDate",
					"attachments",
					"receiversUIDs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_IAnnouncements_": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"Session",
							"Advertisment"
						]
					},
					"referenceID": {
						"type": "string",
						"nullable": true
					},
					"statues": {
						"type": "string",
						"enum": [
							"draft",
							"published"
						]
					},
					"topic": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"sentDate": {
						"type": "string",
						"format": "date-time"
					},
					"attachments": {
						"type": "string"
					},
					"receiversUIDs": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Types.ObjectId"
								},
								"type": "array"
							}
						]
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"IAlarms": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"agreements",
							"sessions",
							"disputes",
							"services providers"
						]
					},
					"referenceID": {
						"type": "string"
					},
					"frequencyUnit": {
						"type": "string",
						"enum": [
							"Days",
							"Hours"
						]
					},
					"frequency": {
						"type": "number",
						"format": "double"
					},
					"active": {
						"type": "boolean"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"name",
					"referenceType",
					"frequencyUnit",
					"frequency",
					"active",
					"startDate",
					"endDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_IAlarms_": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"agreements",
							"sessions",
							"disputes",
							"services providers"
						]
					},
					"referenceID": {
						"type": "string"
					},
					"frequencyUnit": {
						"type": "string",
						"enum": [
							"Days",
							"Hours"
						]
					},
					"frequency": {
						"type": "number",
						"format": "double"
					},
					"active": {
						"type": "boolean"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"INotifications": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"sessions",
							"agreements",
							"disputes",
							"alarm",
							"announcements",
							"users",
							"communications"
						]
					},
					"referenceID": {
						"type": "string"
					},
					"statues": {
						"type": "string",
						"enum": [
							"sent",
							"delivered",
							"opened"
						]
					},
					"title": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"sentDate": {
						"type": "string",
						"format": "date-time"
					},
					"receivedDate": {
						"type": "string",
						"format": "date-time"
					},
					"openDate": {
						"type": "string",
						"format": "date-time"
					},
					"receiverUID": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					}
				},
				"required": [
					"referenceType",
					"referenceID",
					"statues",
					"title",
					"details",
					"sentDate",
					"receivedDate",
					"openDate",
					"receiverUID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_INotifications_": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"referenceType": {
						"type": "string",
						"enum": [
							"sessions",
							"agreements",
							"disputes",
							"alarm",
							"announcements",
							"users",
							"communications"
						]
					},
					"referenceID": {
						"type": "string"
					},
					"statues": {
						"type": "string",
						"enum": [
							"sent",
							"delivered",
							"opened"
						]
					},
					"title": {
						"type": "string"
					},
					"details": {
						"type": "string"
					},
					"sentDate": {
						"type": "string",
						"format": "date-time"
					},
					"receivedDate": {
						"type": "string",
						"format": "date-time"
					},
					"openDate": {
						"type": "string",
						"format": "date-time"
					},
					"receiverUID": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							}
						]
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"IEnumValues": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"enumName": {
						"type": "string"
					},
					"enumValues": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"enumNote": {
						"type": "string"
					}
				},
				"required": [
					"enumName",
					"enumValues",
					"enumNote"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_IEnumValues_": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Types.ObjectId"
							},
							{
								"type": "string"
							}
						]
					},
					"enumName": {
						"type": "string"
					},
					"enumValues": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"enumNote": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/sessions": {
			"get": {
				"operationId": "GetSessions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ISessions"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get List of All Sessions",
				"security": [],
				"parameters": []
			}
		},
		"/sessions/{sessionId}": {
			"get": {
				"operationId": "GetSession",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ISessions"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "the requested session in not found"
					}
				},
				"description": "Get a Session details",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "Deletesession",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Document_any.any.any_"
										},
										{
											"$ref": "#/components/schemas/ISessions"
										},
										{
											"$ref": "#/components/schemas/Required_any_"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "the requested session in not found"
					}
				},
				"description": "Delete a session",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sessionId",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "6300e18d3bbd975cf6459994"
					}
				]
			}
		},
		"/sessions/create": {
			"post": {
				"operationId": "CreateSession",
				"responses": {
					"200": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ISessions"
								},
								"examples": {
									"Example 1": {
										"value": {
											"sessionType": "group",
											"serviceProvidersID": "6300e18d3bbd975cf6459994",
											"clientsIDs": [
												"6300e18d3bbd975cf64599"
											],
											"name": "therapist",
											"details": "therapost",
											"startDate": "2022-09-10T00:00:00.000Z",
											"duration": 50,
											"serviceType": "Home",
											"location": "aleppo",
											"attachments": {
												"attachmentUrl": "attachmentUrl",
												"attachmentName": "attachmentName",
												"attachmentType": "attachmentType"
											},
											"requirements": "",
											"ratings": [
												{
													"raterUID": "raterUID",
													"ratingValue": "ratingValue",
													"ratingDate": "2022-09-10T00:00:00.000Z"
												}
											],
											"reviews": [
												{
													"reviewerUID": "reviewerUID",
													"reviewDetails": "reviewDetails",
													"reviewDate": "2022-09-10T00:00:00.000Z"
												}
											],
											"sessionFee": 25,
											"payments": {
												"discount": 10,
												"paymentMethod": "paymentMethod",
												"payerID": "payerID",
												"amount": 10
											},
											"status": "agreed",
											"doctorReferral": "doctorReferral"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Create a session",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISessions"
							}
						}
					}
				}
			}
		},
		"/sessions/update/{sessionId}": {
			"put": {
				"operationId": "UpdateSession",
				"responses": {
					"200": {
						"description": "updated",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ISessions"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Update a session",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_ISessions_"
							}
						}
					}
				}
			}
		},
		"/announcements": {
			"get": {
				"operationId": "GetAnnouncements",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IAnnouncements"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get List of All Announcements",
				"security": [],
				"parameters": []
			}
		},
		"/announcements/{announcementId}": {
			"get": {
				"operationId": "GetAnnouncement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IAnnouncements"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "the requested Announcement in not found"
					}
				},
				"description": "Get a Announcement details",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "announcementId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteAnnouncement",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Document_any.any.any_"
										},
										{
											"$ref": "#/components/schemas/IAnnouncements"
										},
										{
											"$ref": "#/components/schemas/Required_any_"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "the requested announcement in not found"
					}
				},
				"description": "Delete a announcement",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "announcementId",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "6300e18d3bbd975cf6459994"
					}
				]
			}
		},
		"/announcements/create": {
			"post": {
				"operationId": "Createannouncement",
				"responses": {
					"200": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAnnouncements"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Create a Announcement",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IAnnouncements"
							}
						}
					}
				}
			}
		},
		"/announcements/update/{announcementId}": {
			"put": {
				"operationId": "UpdateAnnouncement",
				"responses": {
					"200": {
						"description": "updated",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IAnnouncements"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Update a announcement",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "announcementId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_IAnnouncements_"
							}
						}
					}
				}
			}
		},
		"/alarms": {
			"get": {
				"operationId": "GetAlarms",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IAlarms"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get List of All Alarms",
				"security": [],
				"parameters": []
			}
		},
		"/alarms/{alarmId}": {
			"get": {
				"operationId": "GetAlarm",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IAlarms"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "the requested Alarm in not found"
					}
				},
				"description": "Get a Alarm details",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "alarmId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteAlarm",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Document_any.any.any_"
										},
										{
											"$ref": "#/components/schemas/IAlarms"
										},
										{
											"$ref": "#/components/schemas/Required_any_"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "the requested alarm in not found"
					}
				},
				"description": "Delete a alarm",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "alarmId",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "6300e18d3bbd975cf6459994"
					}
				]
			}
		},
		"/alarms/create": {
			"post": {
				"operationId": "CreateAlarm",
				"responses": {
					"200": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAlarms"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Create a alarm",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IAlarms"
							}
						}
					}
				}
			}
		},
		"/alarms/update/{alarmId}": {
			"put": {
				"operationId": "Updatealarm",
				"responses": {
					"200": {
						"description": "updated",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IAlarms"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Update a alarm",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "alarmId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_IAlarms_"
							}
						}
					}
				}
			}
		},
		"/notifications": {
			"get": {
				"operationId": "GetNotifications",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/INotifications"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get List of All Notifications",
				"security": [],
				"parameters": []
			}
		},
		"/notifications/{notificationId}": {
			"get": {
				"operationId": "GetNotification",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/INotifications"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "the requested notification in not found"
					}
				},
				"description": "Get a Notification details",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "notificationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteNotification",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Document_any.any.any_"
										},
										{
											"$ref": "#/components/schemas/INotifications"
										},
										{
											"$ref": "#/components/schemas/Required_any_"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "the requested notification in not found"
					}
				},
				"description": "Delete a notification",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "notificationId",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "6300e18d3bbd975cf6459994"
					}
				]
			}
		},
		"/notifications/create": {
			"post": {
				"operationId": "CreateNotification",
				"responses": {
					"200": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/INotifications"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Create a notification",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/INotifications"
							}
						}
					}
				}
			}
		},
		"/notifications/update/{notificationId}": {
			"put": {
				"operationId": "UpdateNotification",
				"responses": {
					"200": {
						"description": "updated",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/INotifications"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Update a notification",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "notificationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_INotifications_"
							}
						}
					}
				}
			}
		},
		"/enums": {
			"get": {
				"operationId": "GetEnums",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IEnumValues"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get List of All Enums",
				"security": [],
				"parameters": []
			}
		},
		"/enums/{enumId}": {
			"get": {
				"operationId": "GetEnum",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IEnumValues"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "the requested enum in not found"
					}
				},
				"description": "Get a Enums details",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "enumId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteEnum",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Document_any.any.any_"
										},
										{
											"$ref": "#/components/schemas/IEnumValues"
										},
										{
											"$ref": "#/components/schemas/Required_any_"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "the requested enum in not found"
					}
				},
				"description": "Delete a enum",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "enumId",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "6300e18d3bbd975cf6459994"
					}
				]
			}
		},
		"/enums/create": {
			"post": {
				"operationId": "CreateEnum",
				"responses": {
					"200": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IEnumValues"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Create a enum",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IEnumValues"
							}
						}
					}
				}
			}
		},
		"/enums/update/{enumId}": {
			"put": {
				"operationId": "UpdateEnum",
				"responses": {
					"200": {
						"description": "updated",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IEnumValues"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed"
					}
				},
				"description": "Update a enum",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "enumId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_IEnumValues_"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}